module.exports = ErrorHandler;

function ErrorHandler(task, id, settings) {
	this.task = task;
	this.id = id;
	this.settings = settings;
	this.errors = [];
	var self = this;
	this.__defineGetter__("length", function() {
		return self.errors.length;
	});
}
ErrorHandler.level = {
	fatal: 10,
	warn: 20,
	info: 30
}

ErrorHandler.prototype.info = function(id, msg) {
	return this.register(id, ErrorHandler.level.info, msg);
}

ErrorHandler.prototype.warn = function(id, msg) {
	return this.register(id, ErrorHandler.level.warn, msg);
}

ErrorHandler.prototype.fatal = function(id, msg) {
	return this.register(id, ErrorHandler.level.fatal, msg);
}

ErrorHandler.prototype.register = function(id, level, msg) {
	var e;
	if (!msg && id && id.constructor === String) {
		msg = id;
		id = undefined;
	}
	if (id && id.constructor === Object && id.error) {
		e = id;
	} else {
		e = { id: id, error: msg }
	}
	if (!e.level) { e.level = level; }
	if (!e.task) { e.task = this.task; }
	if (!e.ns) { e.ns = this.id; }
	if (!e.ts) { e.ts = (new Date()).getTime(); }
	this.errors.push(e);
}

ErrorHandler.prototype.merge = function(list) {
	if (!list) { return this; }
	if (list.constructor === ErrorHandler) {
		if (list === this) { return this; } // do not merge with ourselves
		list = list.list();
	}
	this.errors = this.errors
		.concat(list.map(function(x) {
			if (!x.task) { x.task = ''; }
			if (!x.ns) { x.ns = '';}
			if (!x.level) { x.level = 0; }
			return x;
		}))
		.sort(function(a, b) { return a.ts - b.ts; });
	return this;
}

ErrorHandler.prototype.list = function() {
	return this.errors;
}

ErrorHandler.prototype.stat = function() {
	var stat = {
		total: 0
	}
	Object.keys(ErrorHandler.level).map(function(x) { stat[x] = 0; })
	for (var i in this.errors) {
		stat.total += 1;
		var l = this.getLevelName(this.errors[i]);
		if (!l) { l = 'unknown'; }
		if (!stat[l]) { stat[l] = 0; }
		stat[l] += 1;
	}
	return stat;
}

ErrorHandler.prototype.toString = function(level) {
	var fmt = "  %(task)s.%(ns)7s: %(level)5s  %(id)10s  %(error)s\n",
		s = '';
	for (var i = 0; i < this.errors.length; i++) {
		if (level && this.errors[i].level > level) { continue; }
		s += fmt.pyfmt({
			task: this.errors[i].task,
			ns: this.errors[i].ns,
			error: this.errors[i].error,
			id: this.errors[i].id || '',
			level: this.getLevelName(this.errors[i].level)
		});
	}
	return s;
}

ErrorHandler.prototype.inspect = function() { return this.toString(); }

ErrorHandler.prototype.getLevelName = function(level) {
	var min = Number.POSITIVE_INFINITY, name;
	for (var i in ErrorHandler.level) {
		if (ErrorHandler.level[i] <= min) {
			min = ErrorHandler.level[i];
			name = i;
		}
	}
	return name;
}

ErrorHandler.prototype.print = function(level) {
}

